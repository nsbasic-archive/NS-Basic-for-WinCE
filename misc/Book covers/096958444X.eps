%!PS-Adobe-2.0 EPSF-1.2
%%Creator: bookland.py  0.94  Jan. 2005
%%Title: 0-9695844-4-X
%%BoundingBox: 88 90 252 184
%%EndComments
%  
%       This is free software and comes with NO WARRANTY WHATSOVER
%       Think twice before going to press with this bar code!
%  
%       This Postscript program contains portions bookland.py, a
%       GPL-licensed free program, and is therefore itself licensed
%       under the GPL. Relevant provisions of the GPL notwithstanding,
%       the author licenses users to use and redistribute output
%       files generated by this program without restriction.
%  
%  Command line: user-generated online
%  

% These font names might be different on your system:
/ean13font { /OCRB findfont 10 scalefont setfont } def
/isbnfont { /OCRB findfont 8 scalefont setfont } def
/upc5font { /OCRB findfont 14 scalefont setfont } def

/nextModule { moduleWidth 0 rmoveto } def
% The following shenanigans is to deal with different implementations
% of same font having different char sizes and spacing.
% function fitstring:
% usage: width string font fitstring
% set font, scaled so that string exactly fits desired width
% leave string on stack
/fitstring { dup findfont 1 scalefont setfont % w s f
3 1 roll % f w s
dup stringwidth pop % f w s sw
3 2 roll exch div % f s x
3 2 roll findfont exch scalefont setfont
} def
/barHeight { 72 } def
/nextModule { moduleWidth 0 rmoveto } def
/topcentershow {dup stringwidth pop neg 2 div -9 rmoveto show} def
/toprightshow {dup stringwidth pop neg -9 rmoveto show} def
/bottomcentershow {dup stringwidth pop neg 2 div 0 rmoveto show} def
/bottomrightshow {dup stringwidth pop neg 0 rmoveto show} def
/W { moduleWidth mul 0 rmoveto } def
/B { dup moduleWidth mul 2 div 0 rmoveto
dup moduleWidth mul barWidthReduction sub setlinewidth
0 barHeight rlineto 0 barHeight neg rmoveto
currentpoint stroke moveto
moduleWidth mul 2 div 0 rmoveto } def
/L { dup moduleWidth mul 2 div 0 rmoveto
dup moduleWidth mul barWidthReduction sub setlinewidth
0 -5 rmoveto 0 5 rlineto
0 barHeight rlineto 0 barHeight neg rmoveto
currentpoint stroke moveto
moduleWidth mul 2 div 0 rmoveto } def
100
100
translate
0 0 moveto
ean13font
% Bits:
% L0L0111011000100101001110001011000010100010110L0L0100111010010001011100101110010111001001110L0L
/moduleWidth { 0.013000 72 mul } def
/barWidthReduction { 0.000000 72 mul } def
/barHeight { 1.000000 72 mul } def
0 0 moveto
1 L 
1 W 
1 L 
1 W 
3 B 
1 W 
2 B 
3 W 
1 B 
2 W 
1 B 
1 W 
1 B 
2 W 
3 B 
3 W 
1 B 
1 W 
2 B 
4 W 
1 B 
1 W 
1 B 
3 W 
1 B 
1 W 
2 B 
1 W 
1 L 
1 W 
1 L 
1 W 
1 B 
2 W 
3 B 
1 W 
1 B 
2 W 
1 B 
3 W 
1 B 
1 W 
3 B 
2 W 
1 B 
1 W 
3 B 
2 W 
1 B 
1 W 
3 B 
2 W 
1 B 
2 W 
3 B 
1 W 
1 L 
1 W 
1 L 
stroke
% We do the left digits first and leave the font scaled
% as is for the 9-digit and the right-digits.
% EAN13 Left Digits:
moduleWidth 24 mul 0 moveto
moduleWidth 40 mul (780969) 
/OCRB fitstring topcentershow

% EAN13 human-readable number
% The "9" digit (only when encoding ISBN's and ISMN's, I think):
-5 0 moveto (9) toprightshow
% EAN13 Right Digits:
moduleWidth 70 mul 0 moveto
moduleWidth 40 mul (584445) 
/OCRB fitstring topcentershow
isbnfont
1.235000 72 mul
dup
2 div
1.000000 72 mul 3 add moveto
(ISBN 0-9695844-4-X)
/OCRB fitstring
bottomcentershow
98 0 translate 0 0 moveto
% Bits:
% 10110001011010100111010001101010100111010001101
/moduleWidth { 0.013000 72 mul } def
/barHeight { 0.852000 72 mul } def
0 0 moveto
1 B 
1 W 
2 B 
3 W 
1 B 
1 W 
2 B 
1 W 
1 B 
1 W 
1 B 
2 W 
3 B 
1 W 
1 B 
3 W 
2 B 
1 W 
1 B 
1 W 
1 B 
1 W 
1 B 
2 W 
3 B 
1 W 
1 B 
3 W 
2 B 
1 W 
1 B 
stroke
upc5font
0.611000 72 mul dup 2 div
0.852000 72 mul 2 add moveto
(90000) /OCRB fitstring bottomcentershow
stroke
% showpage supposedly OK in EPS
showpage

% Good luck!
